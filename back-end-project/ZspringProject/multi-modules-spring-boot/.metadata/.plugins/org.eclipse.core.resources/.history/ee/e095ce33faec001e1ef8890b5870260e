package com.school.controller;

import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.school.dto.PatientRes;
import com.school.entities.Course;
import com.school.entities.Student;
import com.school.services.CourseService;
import com.school.services.PatientService;
import com.school.services.StudentService;

@RestController
public class SchoolController {

	@Autowired
//	private StudentService studentService;
	Logger logger = LoggerFactory.getLogger(SchoolController.class);
//############################-OLD-APIi's START--################################################################# 
	// retrieve students using GET method *****************{working end
	// point}*************************

//	@RequestMapping(value = "/api/stdnt", method = RequestMethod.GET)
//	public List<Student> getAllStudents() {
//
//		return this.studentService.getAllStudents();
//	}
//
//	// not working
//	@RequestMapping(value = "/api/end/yu/{id}", method = RequestMethod.GET)
//	public ResponseEntity<HttpStatus> getByStudentId(@PathVariable Long id) {
//
//		return this.studentService.getByStudentId(id);
//	}
//
//	/*
//	 * @RequestMapping(value = "/api/sch", method = RequestMethod.GET)
//	 * 
//	 * public SchoolDetails details() {
//	 * 
//	 * SchoolDetails school = new SchoolDetails(); school.setSchool_name("The PC");
//	 * school.setAddress("ab 1384/45 mount road"); school.setPh_no("99856893937");
//	 * 
//	 * return school; }
//	 */
//
//	// search specific using GET method
//
//	// Working end point by specific search
//	@RequestMapping(value = "/api/{id}", method = RequestMethod.GET)
//	public HashMap<String, Object> getStudents(@PathVariable String id) {
//		HashMap<String, Object> tmp = new HashMap<String, Object>();
//		tmp.put("my_data", this.studentService.getStudents(Long.parseLong(id)));
//		return tmp;
//	}
//
//	// DAO LAYER TEST BY APPLYING AGE=107, BUT WORKING
//	@RequestMapping(value = "/api/age/{age}", method = RequestMethod.GET)
//	public List<Student> getStudentsByAge(@PathVariable Long age) {
//		return this.studentService.getStudentByAge(age);
//	}
//
//	// add students using POST method *****************{working end
//	// point}*************************
//	// @Cacheable(value = "student_info")
//	@RequestMapping(value = "/stud", method = RequestMethod.POST)
//	public Student addStudents(@RequestBody Student students) {
//
//		return this.studentService.addStudents(students);
//
//	}
//
//	// update student record using PUT request method *****************{working end
//	// point}*************************
//	@RequestMapping(value = "/api/student", method = RequestMethod.PUT)
//	public Student update(@RequestBody Student student, Long id) {
//		studentService.update(student, id);
//		return student;
//	}
//
//	// delete using DELETE method *****************{working end
//	// point}*************************
//	@RequestMapping(value = "/del", method = RequestMethod.DELETE)
//	public ResponseEntity<HttpStatus> delete(@RequestParam Long id) {
//
//		try {
//			this.studentService.delete(id);
//			return new ResponseEntity<>(HttpStatus.OK);
//		} catch (Exception e) {
//			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//		}
//
//	}
// ############################-OLD-APIi's END--#################################################

//*************************************SEPARATE-CRUD-OPERATION*****************************
	@Autowired
	private CourseService courseservice;
//	static final Logger logg=Logger.getLogger(SchoolController.class);

	// ************just for testing of get request***********************
	@RequestMapping(value = "/api/h", method = RequestMethod.GET)
	public String getHome() {
		logger.error("Exposed errr!");
		return "Hello I am";
	}

	@RequestMapping(value = "/api/home", method = RequestMethod.GET)
	public String gtHomePage() {
		return "My home page";
	}

	// ************working end point for get request***********************
	@RequestMapping(value = "/api/courses", method = RequestMethod.GET)
	public List<Course> getCourse() {
//		logger.info();
		return this.courseservice.getCourse();
	}

	// ************working end point for get request for particular deleted
	// Id***********************
	@RequestMapping(value = "/api/courses/{courseId}") // for dynamic value we have to write in curly bracket'{}' or if
														// we want get specific value of variable we use {} like
														// courseId here
	public Course getCourse(@PathVariable String courseId) {
		return this.courseservice.getCourse(Long.parseLong(courseId));
	}

	// ************working end point for add request***********************
	@RequestMapping(value = "/api/courses", method = RequestMethod.POST)
	public Course addCourse(@RequestBody Course course) {

		return this.courseservice.addCourse(course);
	}

	// ************working end point for update request***********************
	@RequestMapping(value = "/api/courses", method = RequestMethod.PUT)
	public Course updateCourse(@RequestBody Course course) {
		return this.courseservice.updateCourse(course);
	}

	// ************working end point for delete for particular Id
	// request***********************
	@RequestMapping(value = "/api/courses/{courseId}", method = RequestMethod.DELETE)
	public ResponseEntity<HttpStatus> deleteCourse(@PathVariable String courseId) {
		try {
			this.courseservice.deleteCourse(Long.parseLong(courseId));
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {

			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	// ************working end point for delete in batch***********************

	@RequestMapping(value = "/api/deleteinbatch", method = RequestMethod.DELETE)
	public String deleteInBatch(@RequestBody List<Course> course) {

		courseservice.deleteInBatch(course);

		return "All the courses deleted successfully";

	}

	// ************working end point for delete All request(all entity will
	// delete)***********************
	@RequestMapping(value = "/api/deleteAllCourses", method = RequestMethod.DELETE)
	public ResponseEntity<HttpStatus> deleteAllCourse() {
		try {
			this.courseservice.deleteAllCourse();
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@RequestMapping(value = "/download/{ConclusionZEE:.pdf}", method = RequestMethod.GET)
	public ResponseEntity getFileFromLocal(@PathVariable String ConclusionZEE) {
		Path path = Paths.get(ConclusionZEE);
		UrlResource resource = null;
		try {
			resource = new UrlResource(path.toUri());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		return ResponseEntity.ok().contentType(MediaType.parseMediaType(ConclusionZEE))
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; ConclusionZEE=\"" + resource.getFilename() + "\"")
				.body(resource);

	}

//	*************************************************************
//	@Autowired
//	EmployeeService employeeService;
//	
//	@RequestMapping(value ="/api/emp", method= RequestMethod.POST)
//	public EmployeeReq saveEmp(@RequestBody EmployeeReq employeeReq) {
//		
//		return this.employeeService.saveAll(employeeReq);
//	}
//	
//	public List<EmployeeRes> getAllBySalary(@RequestBody EmployeeReq employeeReq) {
//		return this.employeeService.getAllBySalary(employeeReq);
//		
//		
//	}

	// NEW Service
//	@Autowired
//	PatientService patientService;
//	
//	@RequestMapping(value="/api", method=RequestMethod.GET)
//	public PatientRes getPatient(String p_id){
//		return patientService.findAll();
//		
//	}
}